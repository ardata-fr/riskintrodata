[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 CIRAD Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Daniels. Author, maintainer. David Gohel. Author. ArData. Contractor. CIRAD. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Daniels E, Gohel D (2025). riskintrodata: Data Tools Managing Animal Disease Introduction Risk. R package version 0.0.3.","code":"@Manual{,   title = {riskintrodata: Data Tools for Managing Animal Disease Introduction Risk},   author = {Eli Daniels and David Gohel},   year = {2025},   note = {R package version 0.0.3}, }"},{"path":"/index.html","id":"riskintrodata","dir":"","previous_headings":"","what":"Data Tools for Managing Animal Disease Introduction Risk","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"‘riskintrodata’ package designed provide set functions datasets support management data used estimate risk introducing animal disease specific geographical region. includes tools reading validating geographic tabular datasets commonly used context animal disease risk estimation.","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"primary motivation creating ‘riskintrodata’ isolate centralize datasets data import functions required ‘riskintro’ application dedicated package. separation simplifies testing, improves clarity, makes easier document datasets used application structured way. Additionally, ‘riskintrodata’ package designed simplify package management. helps reduce complexity handling numerous packages required ‘riskintro’ application. centralizing essential datasets associated import functions, ‘riskintrodata’ minimizes package dependencies.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"can install development version riskintrodata like :","code":"pak::pak(\"ardata-fr/riskintrodata\")"},{"path":[]},{"path":"/index.html","id":"read-data","dir":"","previous_headings":"Usage","what":"Read data","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"package provides functions read validate geographic tabular datasets. read geographic data file, can use read_geo_file() function: read raster data, can use read_raster_file() function: specific function read tabular data, can use package ‘readr’ ‘readxl’ read data format CSV Excel.","code":"library(riskintrodata) tun_files <-   system.file(     package = \"riskintrodata\",     \"samples\",     \"tunisia\",     \"epi_units\",     \"tunisia_adm2_clean.gpkg\"   ) read_geo_file(tun_files) #> Simple feature collection with 268 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 7.530076 ymin: 30.23681 xmax: 11.59826 ymax: 37.55986 #> Geodetic CRS:  WGS 84 #> # A tibble: 268 × 2 #>    eu_name                                                                  geom #>    <chr>                                                      <MULTIPOLYGON [°]> #>  1 Ariana Médina      (((10.13861 36.89453, 10.14495 36.89476, 10.15127 36.8947… #>  2 Ettadhamen         (((10.05585 36.84308, 10.06575 36.85019, 10.07327 36.8544… #>  3 Kalaat El Andalous (((10.13862 36.89416, 10.1329 36.88994, 10.13283 36.88892… #>  4 Mnihla             (((10.1317 36.88428, 10.1317 36.88271, 10.1317 36.8797, 1… #>  5 Raoued             (((10.16651 36.88694, 10.16422 36.88874, 10.1576 36.89235… #>  6 Sebkhet Ariana     (((10.27118 36.88874, 10.26842 36.88874, 10.26149 36.8878… #>  7 Sidi Thabet        (((10.01018 37.00285, 10.0102 37.00285, 10.01045 37.00283… #>  8 Soukra             (((10.19313 36.85656, 10.19313 36.85892, 10.19313 36.8640… #>  9 Amdoun             (((9.141866 36.86897, 9.140129 36.86767, 9.137473 36.8660… #> 10 Béja Nord          (((9.086732 36.70221, 9.082556 36.70772, 9.078131 36.7114… #> # ℹ 258 more rows  nga_files <- system.file(   package = \"riskintrodata\",   \"samples\",   \"nigeria\",   \"epi_units\",   \"NGA-ADM1.geojson\" ) read_geo_file(nga_files) #> Simple feature collection with 37 features and 5 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 2.692613 ymin: 4.270204 xmax: 14.67797 ymax: 13.88571 #> Geodetic CRS:  WGS 84 #> # A tibble: 37 × 6 #>    shapeName     shapeISO shapeID shapeGroup shapeType                  geometry #>    <chr>         <chr>    <chr>   <chr>      <chr>                 <POLYGON [°]> #>  1 Cross River   NG-CR    276711… NGA        ADM1      ((8.274303 4.854739, 8.3… #>  2 Abuja Federa… NG-FC    276711… NGA        ADM1      ((6.980815 8.443728, 7.0… #>  3 Ogun          NG-OG    276711… NGA        ADM1      ((4.483238 6.326054, 4.4… #>  4 Oyo           NG-OY    276711… NGA        ADM1      ((4.088356 7.133446, 4.0… #>  5 Sokoto        NG-SO    276711… NGA        ADM1      ((4.126405 13.24967, 4.1… #>  6 Zamfara       NG-ZA    276711… NGA        ADM1      ((4.941011 11.73083, 4.9… #>  7 Lagos         NG-LA    276711… NGA        ADM1      ((2.704644 6.459847, 2.6… #>  8 Akwa Ibom     NG-AK    276711… NGA        ADM1      ((7.88037 5.366796, 7.87… #>  9 Bayelsa       NG-BY    276711… NGA        ADM1      ((5.448385 5.133691, 5.4… #> 10 Ondo          NG-ON    276711… NGA        ADM1      ((4.483238 6.326054, 4.5… #> # ℹ 27 more rows road_access_raster_file <- download_road_access_raster() ra_raster <- read_raster_file(x = road_access_raster_file) ra_raster"},{"path":"/index.html","id":"validate-data","dir":"","previous_headings":"Usage","what":"Validate data","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"package provides function named validate_table_content() validate content datasets. function checks structure data ensures meets expected format, function check: presence required columns data types columns, mandatory optional set rules validate data. can used datasets : Epi units, use validate_table_content(..., name = \"epi_units\"). Emission risks, use validate_table_content(..., name = \"emission_risk_factors\"). Animal mobility, use validate_table_content(..., name = \"animal_mobility\"). Entry points, use validate_table_content(..., name = \"entry_points\"). function takes data frame ‘sf’ object input, along type dataset additional arguments mapping columns. returns list containing validation status dataset, .e. required optional columns, validation rules, dataset renaming selecting specified columns. mapping_* functions utilities help users map data column names standardized column names expected ‘riskintrodata’ package. mappings used apply_mapping() function rename, select, validate columns risk analysis workflows.","code":"tun_epi_files <-   system.file(     package = \"riskintrodata\",     \"samples\",     \"tunisia\",     \"epi_units\", \"tunisia_adm2_raw.gpkg\"   )  tun_epi_unit <- read_geo_file(tun_epi_files)  DATA_EPI_UNITS <- validate_table_content(   x = tun_epi_unit,   table_name = \"epi_units\",   eu_name = \"shapeName\",   user_id = \"fid\" )  DATA_EPI_UNITS #> $table_name #> [1] \"epi_units\" #>  #> $required_columns #> $chk #> [1] FALSE #>  #> $msg #> The following required columns are missing: `eu_name` and `geometry` #>  #> $details #> [1] \"eu_name\"  \"geometry\" #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $optional_columns #> $chk #> [1] TRUE #>  #> $msg #> [1] \"Optional columns selected are available.\" #>  #> $details #> character(0) #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $validate_rules #> $chk #> [1] FALSE #>  #> $msg #> [1] \"Found invalidities while checking dataset.\" #>  #> $details #> # A tibble: 4 × 8 #>   colname  valid required column_found n     index value msg                     #>   <chr>    <lgl> <lgl>    <lgl>        <lgl> <lgl> <lgl> <glue>                  #> 1 eu_id    TRUE  FALSE    TRUE         NA    NA    NA    \"eu_id\" has been valid… #> 2 eu_id    TRUE  FALSE    TRUE         NA    NA    NA    \"eu_id\" has been valid… #> 3 eu_name  FALSE TRUE     FALSE        NA    NA    NA    Column: \"eu_name\" is m… #> 4 geometry FALSE TRUE     FALSE        NA    NA    NA    Column: \"geometry\" is … #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $dataset #> Simple feature collection with 268 features and 0 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 7.530076 ymin: 30.23681 xmax: 11.59826 ymax: 37.55986 #> Geodetic CRS:  WGS 84 #> # A tibble: 268 × 1 #>                                                                             geom #>                                                               <MULTIPOLYGON [°]> #>  1 (((10.13861 36.89453, 10.14495 36.89476, 10.15127 36.89476, 10.1576 36.89235… #>  2 (((10.05585 36.84308, 10.06575 36.85019, 10.07327 36.8544, 10.07366 36.85451… #>  3 (((10.13862 36.89416, 10.1329 36.88994, 10.13283 36.88892, 10.1326 36.88572,… #>  4 (((10.1317 36.88428, 10.1317 36.88271, 10.1317 36.8797, 10.12929 36.87579, 1… #>  5 (((10.16651 36.88694, 10.16422 36.88874, 10.1576 36.89235, 10.15127 36.89476… #>  6 (((10.27118 36.88874, 10.26842 36.88874, 10.26149 36.88783, 10.25577 36.8863… #>  7 (((10.01018 37.00285, 10.0102 37.00285, 10.01045 37.00283, 10.01063 37.00281… #>  8 (((10.19313 36.85656, 10.19313 36.85892, 10.19313 36.86404, 10.19313 36.8667… #>  9 (((9.141866 36.86897, 9.140129 36.86767, 9.137473 36.86604, 9.133329 36.8623… #> 10 (((9.086732 36.70221, 9.082556 36.70772, 9.078131 36.71146, 9.075724 36.7131… #> # ℹ 258 more rows #>  #> attr(,\"class\") #> [1] \"table_validation_status\""},{"path":[]},{"path":"/index.html","id":"mapping_entry_points","dir":"","previous_headings":"Usage > Available Mapping Functions","what":"mapping_entry_points()","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"Maps columns entry points datasets (e.g., border crossings, airports, seaports). Required: - point_name: Name/description entry point - Geospatial info: either lat/lng geometry Optional: - mode: Contraband status (C, NC, missing) - type: Type entry point (AIR, SEA, BC, CC, TC, missing) - sources: List ISO3 codes source countries","code":""},{"path":"/index.html","id":"mapping_epi_units","dir":"","previous_headings":"Usage > Available Mapping Functions","what":"mapping_epi_units()","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"Maps columns epidemiological units datasets (e.g., administrative areas). Required: - eu_name: Name/description epi unit - geometry: Geospatial polygon/multipolygon Optional: - eu_id: Unique identifier epi unit","code":""},{"path":"/index.html","id":"mapping_animal_mobility","dir":"","previous_headings":"Usage > Available Mapping Functions","what":"mapping_animal_mobility()","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"Maps columns animal movement datasets. Required: - o_name: Origin name - d_name: Destination name - d_lng, d_lat: Destination longitude/latitude Optional: - o_iso3, o_lng, o_lat: Origin ISO3 code coordinates - d_iso3: Destination ISO3 code - quantity: Number animals moved","code":""},{"path":"/index.html","id":"mapping_emission_risk_factors","dir":"","previous_headings":"Usage > Available Mapping Functions","what":"mapping_emission_risk_factors()","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"Maps columns emission risk factors datasets (used risk scoring). Required: - iso3, country, disease, animal_category, species - Control/surveillance measures: disease_notification, targeted_surveillance, general_surveillance, screening, precautions_at_the_borders, slaughter, selective_killing_and_disposal, zoning, official_vaccination - last_outbreak_end_date, commerce_illegal, commerce_legal Optional: - data_source: Source data mapping function returns mapping object can passed apply_mapping() standardize validate dataset use ‘riskintro’ analysis pipeline.","code":""},{"path":"/index.html","id":"references-data","dir":"","previous_headings":"","what":"References data","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"package includes several reference datasets used context animal disease risk estimation: iso3 country codes, available function country_reference(). Also utility function iso3_to_name() provided convert ISO3 codes country names.","code":""},{"path":"/index.html","id":"todo","dir":"","previous_headings":"","what":"TODO","title":"Data Tools for Managing Animal Disease Introduction Risk","text":"document illustrate read_emission_risk_factor_file() fortify create_emission_risk_row() ensure works expected. Entry point type French (“PIF Aerien”), CIRAD suggested use English names data French, need decide whether keep French translate English.","code":""},{"path":"/reference/apply_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dataset mapping to dataset — apply_mapping","title":"Apply dataset mapping to dataset — apply_mapping","text":"Utility function use alongside mapping object creator functions mapping_entry_points, mapping_animal_mobility, etc.. mapping column names required values validate dataset use riskintro analysis workflows.","code":""},{"path":"/reference/apply_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dataset mapping to dataset — apply_mapping","text":"","code":"apply_mapping(dataset, mapping, validate = TRUE)"},{"path":"/reference/apply_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dataset mapping to dataset — apply_mapping","text":"dataset dataset apply mapping mapping mapping apply dataset validate whether validate dataset, TRUE default","code":""},{"path":"/reference/apply_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dataset mapping to dataset — apply_mapping","text":"dataset renamed columns based mapping attribute \"table_name\" set expected table type attribute \"valid\" indicating validated .","code":""},{"path":[]},{"path":"/reference/apply_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply dataset mapping to dataset — apply_mapping","text":"","code":"entry_points_fp <-     system.file(       package = \"riskintrodata\",       \"samples\",       \"tunisia\",       \"entry_points\", \"BORDER_CROSSING_POINTS.csv\"     ) entry_points <- readr::read_csv(entry_points_fp) #> Rows: 110 Columns: 6 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (4): NAME, TYPE, MODE, SOURCES #> dbl (2): LONGITUDE_X, LATITUDE_Y #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.   entry_points_mapped <- apply_mapping(   dataset = entry_points,   mapping = mapping_entry_points(     point_name = \"NAME\",     lng = \"LONGITUDE_X\",     lat = \"LATITUDE_Y\",     mode = \"MODE\",     type = \"TYPE\",     sources = \"SOURCES\"   ),   validate = TRUE ) #> ✔ All data in \"entry_points\" valided.  if(FALSE){   entry_points_wrong <- entry_points   entry_points_wrong$TYPE <- rep_len(c(\"PIF Maritime\", \"Passage contrebande\", \"'ELLO\"),                                      length.out = nrow(entry_points))   entry_points_wrong$LONGITUDE_X <- rep_len(c(10.00, 15.00, NA_real_),                                             length.out = nrow(entry_points))   entry_points_wrong[23:30, \"NAME\"] <- NA_character_    entry_points_wrong$NAME <- NULL     entry_points_mapped <- apply_mapping(     dataset = entry_points_wrong,     mapping = mapping_entry_points(       point_name = \"NAME\",       lng = \"LONGITUDE_X\",       lat = \"LATITUDE_Y\",       mode = \"MODE\",       type = \"TYPE\",       sources = \"SOURCES\"     ),     validate = TRUE   ) }"},{"path":"/reference/country_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Country references dataset — country_ref","title":"Country references dataset — country_ref","text":"Country references dataset","code":""},{"path":"/reference/country_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country references dataset — country_ref","text":"","code":"country_ref"},{"path":"/reference/country_ref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Country references dataset — country_ref","text":"object class tbl_df (inherits tbl, data.frame) 505 rows 3 columns.","code":""},{"path":"/reference/country_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of ISO3 country codes and names in French and English — country_reference","title":"Table of ISO3 country codes and names in French and English — country_reference","text":"function returns data frame containing ISO3 country codes corresponding names languages French English.","code":""},{"path":"/reference/country_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of ISO3 country codes and names in French and English — country_reference","text":"","code":"country_reference()"},{"path":"/reference/country_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of ISO3 country codes and names in French and English — country_reference","text":"data frame columns ISO3 codes country names: iso3: character - ISO3 country code. name_en: character - country name English. name_fr: character - country name French.","code":""},{"path":"/reference/country_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of ISO3 country codes and names in French and English — country_reference","text":"","code":"country_reference() #> # A tibble: 505 × 3 #>    iso3  name_en             name_fr            #>    <chr> <chr>               <chr>              #>  1 AFG   Afghanistan         Afghanistan        #>  2 ALA   Aland Islands       Îles d’Åland       #>  3 ALB   Albania             Albanie            #>  4 DZA   Algeria             Algérie            #>  5 ASM   American Samoa      Samoa américaines  #>  6 AND   Andorra             Andorre            #>  7 AGO   Angola              Angola             #>  8 AIA   Anguilla            Anguilla           #>  9 ATA   Antarctica          Antarctique        #> 10 ATG   Antigua and Barbuda Antigua-et-Barbuda #> # ℹ 495 more rows"},{"path":"/reference/create_emission_risk_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new emission risk row — create_emission_risk_row","title":"Create a new emission risk row — create_emission_risk_row","text":"Create new emission risk row given country disease. function generates new row specified parameters returns tibble.","code":""},{"path":"/reference/create_emission_risk_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new emission risk row — create_emission_risk_row","text":"","code":"create_emission_risk_row(   country_id,   disease,   animal_category,   species,   emissionRiskFactors,   new_joker = FALSE )"},{"path":"/reference/create_emission_risk_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new emission risk row — create_emission_risk_row","text":"country_id Country ID (iso3). new_joker TRUE, name new joker ID, otherwise ISO3 code. ISO3 code available country_ref dataset. disease, animal_category, species values inserted emissionRiskFactors table des facteurs d’émission (reactive ou tibble) new_joker logical, TRUE create new joker ID","code":""},{"path":"/reference/create_emission_risk_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new emission risk row — create_emission_risk_row","text":"one row tibble specified parameters. dataset contain following columns: iso3: character - ISO3 country code new joker ID. country: character - full name country. disease: character - name disease. animal_category: character - category animal (\"Domestic\" \"Wild\"). species: character - species name affected disease.","code":""},{"path":"/reference/download_road_access_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Road Access Raster — download_road_access_raster","title":"Download Road Access Raster — download_road_access_raster","text":"function downloads road access raster file 'GitHub' repository located https://github.com/ardata-fr/road-access-raster saves specified destination file.","code":""},{"path":"/reference/download_road_access_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Road Access Raster — download_road_access_raster","text":"","code":"download_road_access_raster(destfile = NULL)"},{"path":"/reference/download_road_access_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Road Access Raster — download_road_access_raster","text":"destfile character string name downloaded file saved. NULL, temporary file created.","code":""},{"path":"/reference/download_road_access_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Road Access Raster — download_road_access_raster","text":"path downloaded file.","code":""},{"path":"/reference/download_road_access_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Road Access Raster — download_road_access_raster","text":"","code":"if (curl::has_internet()) {   road_access_raster_file <- download_road_access_raster() }"},{"path":"/reference/emission_risk_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Emission Risk Weights — emission_risk_weights","title":"Default Emission Risk Weights — emission_risk_weights","text":"emission risk weights default used calculate emission risk scores emission risk emission risk factors. measures control surveillence, (see wahis_emission_risk_factors) associated weighting determined.","code":""},{"path":"/reference/emission_risk_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Emission Risk Weights — emission_risk_weights","text":"","code":"emission_risk_weights"},{"path":"/reference/emission_risk_weights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default Emission Risk Weights — emission_risk_weights","text":"object class list length 9.","code":""},{"path":"/reference/erf_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Emission Risk Factors (ERF) Row — erf_row","title":"Create an Emission Risk Factors (ERF) Row — erf_row","text":"Constructs validates single row emission risk factor data given country, species, disease context. function serves robust helper generate new entries emission risk factors dataset, ensuring compatibility subsequent analytical workflows riskintroanalysis package. function performs input validation data cleaning (e.g., coercing numeric fields integer) assigns appropriate data types. ensures output meets schema expected emission risk scoring system, uses data calculate risk scores across four weighted domains: Epidemiological status (e.g., last_outbreak_end_date) Surveillance measures (e.g., disease_notification, targeted_surveillance, general_surveillance, screening) Control measures (e.g., slaughter, zoning, official_vaccination) Animal commerce (e.g., commerce_illegal, commerce_legal) resulting row includes domain-specific fields used scoring algorithms build_emission_risk_table() derive intermediate final emission risk values.","code":""},{"path":"/reference/erf_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Emission Risk Factors (ERF) Row — erf_row","text":"","code":"erf_row(   iso3,   country,   disease,   animal_category,   species,   disease_notification = 0L,   targeted_surveillance = 0L,   general_surveillance = 0L,   screening = 0L,   precautions_at_the_borders = 0L,   slaughter = 0L,   selective_killing_and_disposal = 0L,   zoning = 0L,   official_vaccination = 0L,   last_outbreak_end_date = as.Date(\"01/01/1900\"),   commerce_illegal = 0L,   commerce_legal = 0L,   data_source = paste0(\"User \", Sys.info()[[\"user\"]], \" - \", Sys.Date()) )"},{"path":"/reference/erf_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Emission Risk Factors (ERF) Row — erf_row","text":"iso3 ISO3 country code (e.g., \"FRA\"), valid ISO3 code match column iso3 returned country_reference() string starting 'JOKER'. country Country name (e.g., \"France\"), name free text, expected match country name name_en name_fr dataset returned country_reference(). disease Disease name (e.g., \"ASF\"), valid disease code name. now check disease name: expected match disease name dataset WAHIS diseases data covering deceases, checked users can add diseases. animal_category Animal category, one \"wild\" \"domestic\". species Species name (e.g., \"pig\"), free text. expected match species name dataset returned WAHIS species dataset data covering species, checked users can add species. disease_notification Integer (0 1). either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. targeted_surveillance Integer (0 1). targeted surveillance applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. general_surveillance Integer (0 1). general surveillance applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. screening Integer (0 1). screening measures place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. precautions_at_the_borders Integer (0 1). precautions taken borders? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. slaughter Integer (0 1). slaughter processes place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. selective_killing_and_disposal Integer (0 1). selective killing disposal procedures place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. zoning Integer (0 1). zoning strategies applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. official_vaccination Integer (0 1). official vaccination programs applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. last_outbreak_end_date Date. end date last outbreak. commerce_illegal Integer (0, 1). Indicators whether illegal commerce conducted. commerce_legal Integer (0, 1). Indicators whether legal commerce conducted. data_source Character. description data source, defaulting user name current date. free text.","code":""},{"path":"/reference/erf_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Emission Risk Factors (ERF) Row — erf_row","text":"tibble::tibble() object cleaned, validated, structured emission risk factor data. output containing input parameters stored table whose columns : iso3: ISO3 country code (e.g., \"FRA\"), valid ISO3 code match column iso3 returned country_reference() string starting 'JOKER'. country: Country name (e.g., \"France\"), name free text, expected match country name name_en name_fr dataset returned country_reference(). disease: Disease name (e.g., \"ASF\"), valid disease code name. now check disease name: expected match disease name dataset WAHIS diseases data covering deceases, checked users can add diseases. animal_category: Animal category, one \"wild\" \"domestic\". species: Species name (e.g., \"pig\"), free text. expected match species name dataset returned WAHIS species dataset data covering species, checked users can add species. disease_notification: Integer (0 1). either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. targeted_surveillance: Integer (0 1). targeted surveillance applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. general_surveillance: Integer (0 1). general surveillance applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. screening: Integer (0 1). screening measures place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. precautions_at_the_borders: Integer (0 1). precautions taken borders? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. slaughter: Integer (0 1). slaughter processes place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. selective_killing_and_disposal: Integer (0 1). selective killing disposal procedures place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. zoning: Integer (0 1). zoning strategies applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. official_vaccination: Integer (0 1). official vaccination programs applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. last_outbreak_end_date: Date. end date last outbreak. commerce_illegal: Integer (0, 1). Indicators whether illegal commerce conducted. commerce_legal: Integer (0, 1). Indicators whether legal commerce conducted. data_source: Character. description data source, defaulting user name current date. free text.","code":""},{"path":[]},{"path":"/reference/erf_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Emission Risk Factors (ERF) Row — erf_row","text":"","code":"erf_row(   iso3 = \"FRA\",   country = \"France\",   disease = \"ASF\",   animal_category = \"livestock\",   species = \"pig\",   disease_notification = 1,   targeted_surveillance = 1,   general_surveillance = 0,   screening = 1,   precautions_at_the_borders = 1,   slaughter = 1,   selective_killing_and_disposal = 0,   zoning = 1,   official_vaccination = 0,   last_outbreak_end_date = \"2020-05-01\",   commerce_illegal = 1,   commerce_legal = 1 ) #> ✔ All data in \"emission_risk_factors\" valided. #> # A tibble: 1 × 18 #>   iso3  country disease animal_category species disease_notification #>   <chr> <chr>   <chr>   <chr>           <chr>                  <int> #> 1 FRA   France  ASF     livestock       pig                        1 #> # ℹ 12 more variables: targeted_surveillance <int>, general_surveillance <int>, #> #   screening <int>, precautions_at_the_borders <int>, slaughter <int>, #> #   selective_killing_and_disposal <int>, zoning <int>, #> #   official_vaccination <int>, last_outbreak_end_date <date>, #> #   commerce_illegal <int>, commerce_legal <int>, data_source <chr>"},{"path":"/reference/get_emission_risk_edit_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an Emission Risk Row from a Country ID — get_emission_risk_edit_row","title":"Get an Emission Risk Row from a Country ID — get_emission_risk_edit_row","text":"Get emission risk row given country ID. function retrieves row emissionRiskFactors dataset returns tibble. row exist, creates new one.","code":""},{"path":"/reference/get_emission_risk_edit_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an Emission Risk Row from a Country ID — get_emission_risk_edit_row","text":"","code":"get_emission_risk_edit_row(   country_id,   emissionRiskFactors,   disease,   animal_category,   species,   new_joker = FALSE )"},{"path":"/reference/get_emission_risk_edit_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an Emission Risk Row from a Country ID — get_emission_risk_edit_row","text":"country_id ISO3 country code (name joker) emissionRiskFactors table emission factors disease, animal_category, species values inserted new_joker TRUE, create new joker ID","code":""},{"path":"/reference/get_emission_risk_edit_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an Emission Risk Row from a Country ID — get_emission_risk_edit_row","text":"single tibble row specified parameters","code":""},{"path":"/reference/get_erf_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default Emission Risk Weights — get_erf_weights","title":"Get Default Emission Risk Weights — get_erf_weights","text":"Get Default Emission Risk Weights","code":""},{"path":"/reference/get_erf_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default Emission Risk Weights — get_erf_weights","text":"","code":"get_erf_weights()"},{"path":"/reference/get_erf_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default Emission Risk Weights — get_erf_weights","text":"named list emission risk weights emission_risk_weights","code":""},{"path":[]},{"path":"/reference/get_wahis_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get WAHIS Emission Risk Factors Dataset — get_wahis_erf","title":"Get WAHIS Emission Risk Factors Dataset — get_wahis_erf","text":"Helper function getting WAHIS emission risk factors dataset. analysis done require filtering one type diease, species animal_category, function helper . dataset documentation see: wahis_emission_risk_factors. function supposed used get data countries involved introduction risk. function can used gather data different diseases, species animal categories time.","code":""},{"path":"/reference/get_wahis_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get WAHIS Emission Risk Factors Dataset — get_wahis_erf","text":"","code":"get_wahis_erf(   disease = character(),   species = character(),   animal_category = character() )"},{"path":"/reference/get_wahis_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get WAHIS Emission Risk Factors Dataset — get_wahis_erf","text":"disease filter dataset one disease species filter dataset one species animal_category filter dataset one animal_category","code":""},{"path":"/reference/get_wahis_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get WAHIS Emission Risk Factors Dataset — get_wahis_erf","text":"emission risk factorts dataset documented wahis_emission_risk_factors","code":""},{"path":[]},{"path":"/reference/get_wahis_erf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get WAHIS Emission Risk Factors Dataset — get_wahis_erf","text":"","code":"get_wahis_erf(   disease = \"Anthrax\",   species = \"Cattle\",   animal_category = \"Domestic\" ) #> ✔ All data in \"emission_risk_factors\" valided. #> # A tibble: 65 × 18 #>    iso3  country            disease animal_category species disease_notification #>    <chr> <chr>              <chr>   <chr>           <chr>                  <int> #>  1 ALB   Albania            Anthrax Domestic        Cattle                     0 #>  2 ARM   Armenia            Anthrax Domestic        Cattle                     0 #>  3 CYM   Cayman Islands     Anthrax Domestic        Cattle                     0 #>  4 HRV   Croatia            Anthrax Domestic        Cattle                     0 #>  5 FLK   Falkland Islands … Anthrax Domestic        Cattle                     0 #>  6 JPN   Japan              Anthrax Domestic        Cattle                     0 #>  7 KGZ   Kyrgyzstan         Anthrax Domestic        Cattle                     0 #>  8 MEX   Mexico             Anthrax Domestic        Cattle                     0 #>  9 RUS   Russia             Anthrax Domestic        Cattle                     0 #> 10 SYC   Seychelles         Anthrax Domestic        Cattle                     0 #> # ℹ 55 more rows #> # ℹ 12 more variables: targeted_surveillance <int>, general_surveillance <int>, #> #   screening <int>, precautions_at_the_borders <int>, slaughter <int>, #> #   selective_killing_and_disposal <int>, zoning <int>, #> #   official_vaccination <int>, last_outbreak_end_date <date>, #> #   commerce_illegal <int>, commerce_legal <int>, data_source <chr>"},{"path":"/reference/has_internet.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Internet Connection — has_internet","title":"Check Internet Connection — has_internet","text":"function tests internet connectivity performing dns lookup. proxy server detected, also check connectivity connecting via proxy. copy curl::has_internet()","code":""},{"path":"/reference/has_internet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Internet Connection — has_internet","text":"","code":"has_internet()"},{"path":"/reference/has_internet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Internet Connection — has_internet","text":"","code":"has_internet() #> [1] TRUE"},{"path":"/reference/is.lat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector is a valid latitude — is.lat","title":"Check if a vector is a valid latitude — is.lat","text":"Check vector valid latitude","code":""},{"path":"/reference/is.lat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector is a valid latitude — is.lat","text":"","code":"is.lat(x)"},{"path":"/reference/is.lat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector is a valid latitude — is.lat","text":"x numeric vector","code":""},{"path":"/reference/is.lat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector is a valid latitude — is.lat","text":"logical vector length x","code":""},{"path":"/reference/is.lng.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector is a valid longitude — is.lng","title":"Check if a vector is a valid longitude — is.lng","text":"Check vector valid longitude","code":""},{"path":"/reference/is.lng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector is a valid longitude — is.lng","text":"","code":"is.lng(x)"},{"path":"/reference/is.lng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector is a valid longitude — is.lng","text":"x numeric vector","code":""},{"path":"/reference/is.lng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector is a valid longitude — is.lng","text":"logical vector length x","code":""},{"path":"/reference/iso3_to_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ISO3 country codes to country names — iso3_to_name","title":"Convert ISO3 country codes to country names — iso3_to_name","text":"function converts ISO3 country codes country names specified language.","code":""},{"path":"/reference/iso3_to_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ISO3 country codes to country names — iso3_to_name","text":"","code":"iso3_to_name(x, lang = \"en\")"},{"path":"/reference/iso3_to_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ISO3 country codes to country names — iso3_to_name","text":"x character vector ISO3 country codes. lang character string specifying language country names. Default \"en\" (English), alternatives include \"fr\" (French).","code":""},{"path":"/reference/iso3_to_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ISO3 country codes to country names — iso3_to_name","text":"character vector country names corresponding provided ISO3 codes.","code":""},{"path":"/reference/iso3_to_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ISO3 country codes to country names — iso3_to_name","text":"function uses reference data frame country_ref contains ISO3 codes corresponding country names multiple languages. data come countries package.","code":""},{"path":"/reference/iso3_to_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ISO3 country codes to country names — iso3_to_name","text":"","code":"iso3_to_name(c(\"USA\", \"FRA\", \"DEU\")) #> [1] \"United States of America\" \"France\"                   #> [3] \"Germany\""},{"path":"/reference/mapping_animal_mobility.html","id":null,"dir":"Reference","previous_headings":"","what":"Animal movement dataset mapping — mapping_animal_mobility","title":"Animal movement dataset mapping — mapping_animal_mobility","text":"dataset mapping used apply_mapping() renames, select validation columns dataset correspond parameter names .","code":""},{"path":"/reference/mapping_animal_mobility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animal movement dataset mapping — mapping_animal_mobility","text":"","code":"mapping_animal_mobility(   o_iso3 = NULL,   o_name,   o_lng = NULL,   o_lat = NULL,   d_iso3 = NULL,   d_name,   d_lng,   d_lat,   quantity = NULL )"},{"path":"/reference/mapping_animal_mobility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animal movement dataset mapping — mapping_animal_mobility","text":"o_iso3 character, optional,  origin country iso3 code o_name character, reauired, origin name description o_lng numeric, optional, origin point longitude o_lat numeric, option, origin point latitude d_iso3 character, optional,  destination country iso3 code d_name character, origin name description d_lng numeric, required, destination point longitude d_lat numeric, required, destination point latitude quantity numeric, optional, used weight animal movement flows quantity animals, provided weighting done.","code":""},{"path":"/reference/mapping_animal_mobility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animal movement dataset mapping — mapping_animal_mobility","text":"mapping object used apply_mapping()","code":""},{"path":[]},{"path":"/reference/mapping_emission_risk_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Emission risk factors dataset mapping — mapping_emission_risk_factors","title":"Emission risk factors dataset mapping — mapping_emission_risk_factors","text":"dataset mapping used apply_mapping() renames, select validation columns dataset correspond parameter names . data requirements dataset see wahis_emission_risk_factors documentation","code":""},{"path":"/reference/mapping_emission_risk_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emission risk factors dataset mapping — mapping_emission_risk_factors","text":"","code":"mapping_emission_risk_factors(   iso3,   country,   disease,   animal_category,   species,   disease_notification,   targeted_surveillance,   general_surveillance,   screening,   precautions_at_the_borders,   slaughter,   selective_killing_and_disposal,   zoning,   official_vaccination,   last_outbreak_end_date,   commerce_illegal,   commerce_legal,   data_source = NULL )"},{"path":"/reference/mapping_emission_risk_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emission risk factors dataset mapping — mapping_emission_risk_factors","text":"iso3 ISO3 country code (e.g., \"FRA\"), valid ISO3 code match column iso3 returned country_reference() string starting 'JOKER'. country Country name (e.g., \"France\"), name free text, expected match country name name_en name_fr dataset returned country_reference(). disease Disease name (e.g., \"ASF\"), valid disease code name. now check disease name: expected match disease name dataset WAHIS diseases data covering deceases, checked users can add diseases. animal_category Animal category, one \"wild\" \"domestic\". species Species name (e.g., \"pig\"), free text. expected match species name dataset returned WAHIS species dataset data covering species, checked users can add species. disease_notification Integer (0 1). either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. targeted_surveillance Integer (0 1). targeted surveillance applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. general_surveillance Integer (0 1). general surveillance applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. screening Integer (0 1). screening measures place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. precautions_at_the_borders Integer (0 1). precautions taken borders? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. slaughter Integer (0 1). slaughter processes place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. selective_killing_and_disposal Integer (0 1). selective killing disposal procedures place? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. zoning Integer (0 1). zoning strategies applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. official_vaccination Integer (0 1). official vaccination programs applied? either 1 0, 0 means 'measure inplace' 1 means 'measure inplace', .e. 1 = risk, 0 = risk. last_outbreak_end_date Date. end date last outbreak. commerce_illegal Integer (0, 1). Indicators whether illegal commerce conducted. commerce_legal Integer (0, 1). Indicators whether legal commerce conducted. data_source Character. description data source, defaulting user name current date. free text.","code":""},{"path":"/reference/mapping_emission_risk_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emission risk factors dataset mapping — mapping_emission_risk_factors","text":"mapping object used apply_mapping()","code":""},{"path":[]},{"path":"/reference/mapping_entry_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Entry points dataset mapping — mapping_entry_points","title":"Entry points dataset mapping — mapping_entry_points","text":"dataset mapping used apply_mapping() renames, select validation columns dataset correspond parameter names .","code":""},{"path":"/reference/mapping_entry_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entry points dataset mapping — mapping_entry_points","text":"","code":"mapping_entry_points(   point_name,   lng = NULL,   lat = NULL,   geometry = NULL,   mode = NULL,   type = NULL,   sources = NULL )"},{"path":"/reference/mapping_entry_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entry points dataset mapping — mapping_entry_points","text":"point_name character column naming describing point lng numeric column, latitude point lat numeric column, longitude point (required geometry column present) geometry sf_POINTS column dataset class sf (simple feature) mode character factor, optional, indicates whether points contraband (C) non-contraband (NC). Values either C, NC missing. type Optional, indicates type transport used, displaying maps affect risk analysis scores. can character factor, one following: \"AIR\" (airport), \"SEA\" (sea port), \"BC\" (border crossing), \"CC\" (contraband crossing), \"TC\" (transhumance crossing) NA (missing)\". sources character, optional, list ISO3 country codes animals enter entry point.","code":""},{"path":"/reference/mapping_entry_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Entry points dataset mapping — mapping_entry_points","text":"mapping object used apply_mapping()","code":""},{"path":[]},{"path":"/reference/mapping_epi_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Epidemiological units dataset mapping — mapping_epi_units","title":"Epidemiological units dataset mapping — mapping_epi_units","text":"dataset mapping used apply_mapping() renames, select validation columns dataset correspond parameter names .","code":""},{"path":"/reference/mapping_epi_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epidemiological units dataset mapping — mapping_epi_units","text":"","code":"mapping_epi_units(eu_id = NULL, eu_name, geometry)"},{"path":"/reference/mapping_epi_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epidemiological units dataset mapping — mapping_epi_units","text":"eu_id charcter, optional, can provided join datasets needed eu_name character, required, name description epi units geometry sf_POLYGON sf_MULTIPOLYGON geospatial data type, representing geographical areas epi unit.","code":""},{"path":"/reference/mapping_epi_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epidemiological units dataset mapping — mapping_epi_units","text":"mapping object used apply_mapping()","code":""},{"path":[]},{"path":"/reference/neighbours_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbours table — neighbours_table","title":"Neighbours table — neighbours_table","text":"correspondence table countries neighbours.","code":""},{"path":"/reference/neighbours_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbours table — neighbours_table","text":"","code":"neighbours_table"},{"path":"/reference/neighbours_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Neighbours table — neighbours_table","text":"object class tbl_df (inherits tbl, data.frame) 634 rows 4 columns.","code":""},{"path":"/reference/neighbours_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Neighbours table — neighbours_table","text":"Columns: country_id: country iso3 code neighbour_id: neighbouring country iso3 code border_id: primary key, combination country_id-neighbour_id border_length: shared border estimated length","code":""},{"path":"/reference/read_emission_risk_factor_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Emission Risk Factor File — read_emission_risk_factor_file","title":"Read Emission Risk Factor File — read_emission_risk_factor_file","text":"Reads text file containing emission risk factors animal diseases. file tabular format specific columns (see details).","code":""},{"path":"/reference/read_emission_risk_factor_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Emission Risk Factor File — read_emission_risk_factor_file","text":"","code":"read_emission_risk_factor_file(filepath)"},{"path":"/reference/read_emission_risk_factor_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Emission Risk Factor File — read_emission_risk_factor_file","text":"filepath character string specifying path text file.","code":""},{"path":"/reference/read_emission_risk_factor_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Emission Risk Factor File — read_emission_risk_factor_file","text":"text file expected tabular format following columns: Country information: iso3: character - three-letter ISO 3166-1 alpha-3 country code. country: character - full name country. Disease information (whole dataset): disease: character - name disease. animal_category: character - category animal (\"Domestic\" \"Wild\"). species: character - species name affected disease. Measures control surveillence, either 1 0 (0 = measure inplace, 1 = measure inplace, .e. 1 = risk, 0 = risk). disease_notification: integer - Indicator notification targeted_surveillance: integer - Risk factor score targeted surveillance efforts. general_surveillance: integer - Risk factor score general surveillance activities. screening: integer - Risk factor score screening measures. precautions_at_the_borders: integer - Risk factor score precautions taken borders. slaughter: integer - Risk factor score related slaughter process. selective_killing_and_disposal: integer - Risk factor score selective killing disposal procedures. zoning: integer - Risk factor score zoning strategies. official_vaccination: integer - Risk factor score official vaccination programs. Epidemiological status: last_outbreak_end_date: Date (YYYY-MM-DD) - end date last outbreak. Animal commerce (indicators level illegality commerce) commerce_illegal: integer -  either 1 0 commerce_legal: integer -  either 1 0 information: data_source: character - Reference source data.","code":""},{"path":"/reference/read_emission_risk_factor_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Emission Risk Factor File — read_emission_risk_factor_file","text":"","code":"tun_erf_file <-   system.file(     package = \"riskintrodata\",     \"samples\",     \"tunisia\",     \"emission_risk_factor\",     \"emission_risk_factors.csv\"   ) x <- read_emission_risk_factor_file(tun_erf_file) x #> # A tibble: 65 × 18 #>    iso3  country            disease animal_category species disease_notification #>    <chr> <chr>              <chr>   <chr>           <chr>                  <int> #>  1 ALB   Albania            Brucel… Domestic        Cattle                     0 #>  2 BWA   Botswana           Brucel… Domestic        Cattle                     1 #>  3 CYM   Cayman Islands     Brucel… Domestic        Cattle                     0 #>  4 JPN   Japan              Brucel… Domestic        Cattle                     0 #>  5 SYC   Seychelles         Brucel… Domestic        Cattle                     0 #>  6 SYR   Syria              Brucel… Domestic        Cattle                     0 #>  7 PSE   Palestine          Brucel… Domestic        Cattle                     0 #>  8 USA   United States of … Brucel… Domestic        Cattle                     0 #>  9 ARM   Armenia            Brucel… Domestic        Cattle                     0 #> 10 AZE   Azerbaijan         Brucel… Domestic        Cattle                     0 #> # ℹ 55 more rows #> # ℹ 12 more variables: targeted_surveillance <int>, general_surveillance <int>, #> #   screening <int>, precautions_at_the_borders <int>, slaughter <int>, #> #   selective_killing_and_disposal <int>, zoning <int>, #> #   official_vaccination <int>, last_outbreak_end_date <date>, #> #   commerce_illegal <int>, commerce_legal <int>, data_source <chr>"},{"path":"/reference/read_geo_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Geo Data from Files — read_geo_file","title":"Import Geo Data from Files — read_geo_file","text":"function imports geographic data files. handles shapefiles specifically, consist multiple files. function checks presence shapefiles reads accordingly.","code":""},{"path":"/reference/read_geo_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Geo Data from Files — read_geo_file","text":"","code":"read_geo_file(x)"},{"path":"/reference/read_geo_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Geo Data from Files — read_geo_file","text":"x character vector file path(s) geographic data file(s).","code":""},{"path":"/reference/read_geo_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Geo Data from Files — read_geo_file","text":"sf object representing imported geographic data.","code":""},{"path":"/reference/read_geo_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Geo Data from Files — read_geo_file","text":"function designed read geographic data files, wrapper around sf::read_sf() function. checks input files shapefiles handles accordingly. input files shapefiles, reads directly using sf::read_sf().","code":""},{"path":"/reference/read_geo_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Geo Data from Files — read_geo_file","text":"","code":"tun_files <-     system.file(       package = \"riskintrodata\",       \"samples\",       \"tunisia\",       \"epi_units\", \"tunisia_adm2_raw.gpkg\"     ) read_geo_file(tun_files) #> Simple feature collection with 268 features and 13 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 7.530076 ymin: 30.23681 xmax: 11.59826 ymax: 37.55986 #> Geodetic CRS:  WGS 84 #> # A tibble: 268 × 14 #>    GID_2  GID_0 COUNTRY GID_1 NAME_1 NL_NAME_1 NAME_2 VARNAME_2 NL_NAME_2 TYPE_2 #>    <chr>  <chr> <chr>   <chr> <chr>  <chr>     <chr>  <chr>     <chr>     <chr>  #>  1 TUN.1… TUN   Tunisia TUN.… Ariana NA        Arian… Ariana M… NA        Deleg… #>  2 TUN.1… TUN   Tunisia TUN.… Ariana NA        Ettad… NA        NA        Deleg… #>  3 TUN.1… TUN   Tunisia TUN.… Ariana NA        Kalaa… NA        NA        Deleg… #>  4 TUN.1… TUN   Tunisia TUN.… Ariana NA        Mnihla NA        NA        Deleg… #>  5 TUN.1… TUN   Tunisia TUN.… Ariana NA        Raoued NA        NA        Deleg… #>  6 TUN.1… TUN   Tunisia TUN.… Ariana NA        Sebkh… NA        NA        Water… #>  7 TUN.1… TUN   Tunisia TUN.… Ariana NA        Sidi … NA        NA        Deleg… #>  8 TUN.1… TUN   Tunisia TUN.… Ariana NA        Soukra NA        NA        Deleg… #>  9 TUN.2… TUN   Tunisia TUN.… Béja   NA        Amdoun NA        NA        Deleg… #> 10 TUN.2… TUN   Tunisia TUN.… Béja   NA        Béja … NA        NA        Deleg… #> # ℹ 258 more rows #> # ℹ 4 more variables: ENGTYPE_2 <chr>, CC_2 <chr>, HASC_2 <chr>, #> #   geom <MULTIPOLYGON [°]>  nga_files <- system.file(   package = \"riskintrodata\",   \"samples\",   \"nigeria\",   \"epi_units\",   \"NGA-ADM1.geojson\" ) read_geo_file(nga_files) #> Simple feature collection with 37 features and 5 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 2.692613 ymin: 4.270204 xmax: 14.67797 ymax: 13.88571 #> Geodetic CRS:  WGS 84 #> # A tibble: 37 × 6 #>    shapeName     shapeISO shapeID shapeGroup shapeType                  geometry #>    <chr>         <chr>    <chr>   <chr>      <chr>                 <POLYGON [°]> #>  1 Cross River   NG-CR    276711… NGA        ADM1      ((8.274303 4.854739, 8.3… #>  2 Abuja Federa… NG-FC    276711… NGA        ADM1      ((6.980815 8.443728, 7.0… #>  3 Ogun          NG-OG    276711… NGA        ADM1      ((4.483238 6.326054, 4.4… #>  4 Oyo           NG-OY    276711… NGA        ADM1      ((4.088356 7.133446, 4.0… #>  5 Sokoto        NG-SO    276711… NGA        ADM1      ((4.126405 13.24967, 4.1… #>  6 Zamfara       NG-ZA    276711… NGA        ADM1      ((4.941011 11.73083, 4.9… #>  7 Lagos         NG-LA    276711… NGA        ADM1      ((2.704644 6.459847, 2.6… #>  8 Akwa Ibom     NG-AK    276711… NGA        ADM1      ((7.88037 5.366796, 7.87… #>  9 Bayelsa       NG-BY    276711… NGA        ADM1      ((5.448385 5.133691, 5.4… #> 10 Ondo          NG-ON    276711… NGA        ADM1      ((4.483238 6.326054, 4.5… #> # ℹ 27 more rows"},{"path":"/reference/read_raster_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Raster File — read_raster_file","title":"Read Raster File — read_raster_file","text":"Reads raster file specified path. function checks file exists valid raster file (tif, tiff, png).","code":""},{"path":"/reference/read_raster_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Raster File — read_raster_file","text":"","code":"read_raster_file(x)"},{"path":"/reference/read_raster_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Raster File — read_raster_file","text":"x character string specifying path raster file.","code":""},{"path":"/reference/read_raster_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Raster File — read_raster_file","text":"SpatRaster object representing raster data.","code":""},{"path":"/reference/read_raster_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Raster File — read_raster_file","text":"","code":"if (curl::has_internet()) {   road_access_raster_file <- download_road_access_raster()   ra_raster <- read_raster_file(x = road_access_raster_file) }"},{"path":"/reference/update_emission_risk_row_from_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Emission Risk Row from Input — update_emission_risk_row_from_input","title":"Update Emission Risk Row from Input — update_emission_risk_row_from_input","text":"Updates edit line user input values","code":""},{"path":"/reference/update_emission_risk_row_from_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Emission Risk Row from Input — update_emission_risk_row_from_input","text":"","code":"update_emission_risk_row_from_input(row, input)"},{"path":"/reference/update_emission_risk_row_from_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Emission Risk Row from Input — update_emission_risk_row_from_input","text":"row ligne tibble à modifier input objet list ou liste nommée simulant input$... de Shiny","code":""},{"path":"/reference/update_emission_risk_row_from_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Emission Risk Row from Input — update_emission_risk_row_from_input","text":"tibble modifié avec colonnes binaires pour les facteurs","code":""},{"path":"/reference/validate_table_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate 'riskintro' Datasets — validate_table_content","title":"Validate 'riskintro' Datasets — validate_table_content","text":"Validates datasets 'riskintro' rules. function checks required optional columns, validates data using rules defined specifications.","code":""},{"path":"/reference/validate_table_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate 'riskintro' Datasets — validate_table_content","text":"","code":"validate_table_content(x, table_name, ...)"},{"path":"/reference/validate_table_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate 'riskintro' Datasets — validate_table_content","text":"x data frame 'sf' object validated. table_name character string specifying name dataset. accepts one following values: \"animal_mobility\" \"epi_units\" \"entry_points\" \"emission_risk_factors\" ... Additional arguments passed function. expected named list columns renamed dataset. example, col1 = \"new_col1\", col2 = \"new_col2\".","code":""},{"path":"/reference/validate_table_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate 'riskintro' Datasets — validate_table_content","text":"list containing validation status dataset. list contains following elements: required_columns: list status required columns. optional_columns: list status optional columns. validate_rules: list status validation rules. dataset: dataset renaming selecting specified columns. validation fails, element NULL, available.","code":""},{"path":"/reference/validate_table_content.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate 'riskintro' Datasets — validate_table_content","text":"function checks dataset contains required optional columns specified specifications. also validates data using rules defined specifications. errors met validity rules satisfied, function returns list status validation.","code":""},{"path":"/reference/validate_table_content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate 'riskintro' Datasets — validate_table_content","text":"","code":"## ---- read-epi-units-tunisia ---- tun_epi_files <-   system.file(     package = \"riskintrodata\",     \"samples\",     \"tunisia\",     \"epi_units\", \"tunisia_adm2_raw.gpkg\"   )  tun_epi_unit <- read_geo_file(tun_epi_files)  DATA_EPI_UNITS <- validate_table_content(   x = tun_epi_unit,   table_name = \"epi_units\",   eu_name = \"shapeName\",   user_id = \"fid\" )  DATA_EPI_UNITS #> $table_name #> [1] \"epi_units\" #>  #> $required_columns #> $chk #> [1] FALSE #>  #> $msg #> The following required columns are missing: `eu_name` and `geometry` #>  #> $details #> [1] \"eu_name\"  \"geometry\" #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $optional_columns #> $chk #> [1] TRUE #>  #> $msg #> [1] \"Optional columns selected are available.\" #>  #> $details #> character(0) #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $validate_rules #> $chk #> [1] FALSE #>  #> $msg #> [1] \"Found invalidities while checking dataset.\" #>  #> $details #> # A tibble: 4 × 8 #>   colname  valid required column_found n     index value msg                     #>   <chr>    <lgl> <lgl>    <lgl>        <lgl> <lgl> <lgl> <glue>                  #> 1 eu_id    TRUE  FALSE    TRUE         NA    NA    NA    \"eu_id\" has been valid… #> 2 eu_id    TRUE  FALSE    TRUE         NA    NA    NA    \"eu_id\" has been valid… #> 3 eu_name  FALSE TRUE     FALSE        NA    NA    NA    Column: \"eu_name\" is m… #> 4 geometry FALSE TRUE     FALSE        NA    NA    NA    Column: \"geometry\" is … #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $dataset #> Simple feature collection with 268 features and 0 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 7.530076 ymin: 30.23681 xmax: 11.59826 ymax: 37.55986 #> Geodetic CRS:  WGS 84 #> # A tibble: 268 × 1 #>                                                                             geom #>                                                               <MULTIPOLYGON [°]> #>  1 (((10.13861 36.89453, 10.14495 36.89476, 10.15127 36.89476, 10.1576 36.89235… #>  2 (((10.05585 36.84308, 10.06575 36.85019, 10.07327 36.8544, 10.07366 36.85451… #>  3 (((10.13862 36.89416, 10.1329 36.88994, 10.13283 36.88892, 10.1326 36.88572,… #>  4 (((10.1317 36.88428, 10.1317 36.88271, 10.1317 36.8797, 10.12929 36.87579, 1… #>  5 (((10.16651 36.88694, 10.16422 36.88874, 10.1576 36.89235, 10.15127 36.89476… #>  6 (((10.27118 36.88874, 10.26842 36.88874, 10.26149 36.88783, 10.25577 36.8863… #>  7 (((10.01018 37.00285, 10.0102 37.00285, 10.01045 37.00283, 10.01063 37.00281… #>  8 (((10.19313 36.85656, 10.19313 36.85892, 10.19313 36.86404, 10.19313 36.8667… #>  9 (((9.141866 36.86897, 9.140129 36.86767, 9.137473 36.86604, 9.133329 36.8623… #> 10 (((9.086732 36.70221, 9.082556 36.70772, 9.078131 36.71146, 9.075724 36.7131… #> # ℹ 258 more rows #>  #> attr(,\"class\") #> [1] \"table_validation_status\" ## ---- read-animal-mobility-tunisia ---- tun_animal_mobility <-   system.file(     package = \"riskintrodata\",     \"samples\",     \"tunisia\",     \"animal_mobility\", \"ANIMAL_MOBILITY_raw.csv\"   )  x <- readr::read_csv(   tun_animal_mobility, ) #> Rows: 112 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (6): ORIGIN_NAME, ORIGIN_COUNTRY, ORIGIN_ISO3, DESTINATION_NAME, DESTINA... #> dbl (5): ORIGIN_LONGITUDE_X, ORIGIN_LATITUDE_Y, DESTINATION_LONGITUDE_X, DES... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  DATA_ANIMAL_MOBILITY <- apply_mapping(   x,   mapping = mapping_animal_mobility(     o_name = \"ORIGIN_NAME\",     o_lng = \"ORIGIN_LONGITUDE_X\",     o_lat = \"ORIGIN_LATITUDE_Y\",     d_name = \"DESTINATION_NAME\",     d_lng = \"DESTINATION_LONGITUDE_X\",     d_lat = \"DESTINATION_LATITUDE_Y\",     quantity = \"HEADCOUNT\"   ),   validate = TRUE ) #> ✔ All data in \"animal_mobility\" valided.  DATA_ANIMAL_MOBILITY #> # A tibble: 112 × 12 #>    animal_mobility_id o_name   o_lng o_lat d_name d_lng d_lat quantity o_country #>    <chr>              <chr>    <dbl> <dbl> <chr>  <dbl> <dbl>    <dbl> <chr>     #>  1 am-00001           AEROP…  -4.08   14.5 AEROP… 10.8   33.9     2217 Mali      #>  2 am-00002           AEROP… -17.5    14.7 AEROP… 10.7   34.7     5343 Senegal   #>  3 am-00003           SENGH… -13.2    14.6 POINT…  7.66  33.5     7798 Senegal   #>  4 am-00004           TESSA…   0.706  20.4 POINT… 10.7   32.0     9519 Mali      #>  5 am-00005           PERUV… -77.1   -12.0 PORT …  9.89  37.3     6133 Peru      #>  6 am-00006           BAHIA… -62.3    48.9 PORT … 10.1   33.9     1785 Canada    #>  7 am-00007           AINZE…   8.26   35.6 BOUJA…  8.49  35.7     2693 Algeria   #>  8 am-00008           AINZE…   8.26   35.6 BOUJA…  8.49  35.7     6307 Algeria   #>  9 am-00009           AINZE…   8.26   35.6 BOUJA…  8.49  35.7     4791 Algeria   #> 10 am-00010           BOUGO…   8.36   36.7 HALIMA 10.0   36.4     7299 Algeria   #> # ℹ 102 more rows #> # ℹ 3 more variables: o_iso3 <chr>, d_country <chr>, d_iso3 <chr> # read Tunisia emission risk factors dataset ---- tun_erf_file <-   system.file(     package = \"riskintrodata\",     \"samples\",     \"tunisia\",     \"emission_risk_factor\",     \"emission_risk_factors.csv\"   ) x <- read_emission_risk_factor_file(tun_erf_file)  DATA_ERF <- validate_table_content(x, table_name = \"emission_risk_factors\")  DATA_ERF #> $table_name #> [1] \"emission_risk_factors\" #>  #> $required_columns #> $chk #> [1] TRUE #>  #> $msg #> [1] \"All required columns selected.\" #>  #> $details #> character(0) #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $optional_columns #> $chk #> [1] TRUE #>  #> $msg #> [1] \"No optional columns selected.\" #>  #> $details #> character(0) #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $validate_rules #> $chk #> [1] TRUE #>  #> $msg #> 17 valid rules checking dataset. #>  #> $details #> # A tibble: 17 × 8 #>    colname                   valid required column_found n     index value msg   #>    <chr>                     <lgl> <lgl>    <lgl>        <lgl> <lgl> <lgl> <glu> #>  1 iso3                      TRUE  TRUE     TRUE         NA    NA    NA    \"iso… #>  2 country                   TRUE  TRUE     TRUE         NA    NA    NA    \"cou… #>  3 disease                   TRUE  TRUE     TRUE         NA    NA    NA    \"dis… #>  4 animal_category           TRUE  TRUE     TRUE         NA    NA    NA    \"ani… #>  5 species                   TRUE  TRUE     TRUE         NA    NA    NA    \"spe… #>  6 disease_notification      TRUE  TRUE     TRUE         NA    NA    NA    \"dis… #>  7 targeted_surveillance     TRUE  TRUE     TRUE         NA    NA    NA    \"tar… #>  8 general_surveillance      TRUE  TRUE     TRUE         NA    NA    NA    \"gen… #>  9 screening                 TRUE  TRUE     TRUE         NA    NA    NA    \"scr… #> 10 precautions_at_the_borde… TRUE  TRUE     TRUE         NA    NA    NA    \"pre… #> 11 slaughter                 TRUE  TRUE     TRUE         NA    NA    NA    \"sla… #> 12 selective_killing_and_di… TRUE  TRUE     TRUE         NA    NA    NA    \"sel… #> 13 zoning                    TRUE  TRUE     TRUE         NA    NA    NA    \"zon… #> 14 official_vaccination      TRUE  TRUE     TRUE         NA    NA    NA    \"off… #> 15 last_outbreak_end_date    TRUE  TRUE     TRUE         NA    NA    NA    \"las… #> 16 commerce_illegal          TRUE  TRUE     TRUE         NA    NA    NA    \"com… #> 17 commerce_legal            TRUE  TRUE     TRUE         NA    NA    NA    \"com… #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $dataset #> # A tibble: 65 × 18 #>    iso3  country            disease animal_category species disease_notification #>    <chr> <chr>              <chr>   <chr>           <chr>                  <int> #>  1 ALB   Albania            Brucel… Domestic        Cattle                     0 #>  2 BWA   Botswana           Brucel… Domestic        Cattle                     1 #>  3 CYM   Cayman Islands     Brucel… Domestic        Cattle                     0 #>  4 JPN   Japan              Brucel… Domestic        Cattle                     0 #>  5 SYC   Seychelles         Brucel… Domestic        Cattle                     0 #>  6 SYR   Syria              Brucel… Domestic        Cattle                     0 #>  7 PSE   Palestine          Brucel… Domestic        Cattle                     0 #>  8 USA   United States of … Brucel… Domestic        Cattle                     0 #>  9 ARM   Armenia            Brucel… Domestic        Cattle                     0 #> 10 AZE   Azerbaijan         Brucel… Domestic        Cattle                     0 #> # ℹ 55 more rows #> # ℹ 12 more variables: targeted_surveillance <int>, general_surveillance <int>, #> #   screening <int>, precautions_at_the_borders <int>, slaughter <int>, #> #   selective_killing_and_disposal <int>, zoning <int>, #> #   official_vaccination <int>, last_outbreak_end_date <date>, #> #   commerce_illegal <int>, commerce_legal <int>, data_source <chr> #>  #> $dataset_changes #> character(0) #>  #> attr(,\"class\") #> [1] \"table_validation_status\" # read entry points data from Tunisia ---- tun_entry_points <- system.file(   package = \"riskintrodata\",   \"samples\",   \"tunisia\",   \"entry_points\",   \"BORDER_CROSSING_POINTS.csv\" )  x <- readr::read_delim(   tun_entry_points ) #> Rows: 110 Columns: 6 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (4): NAME, TYPE, MODE, SOURCES #> dbl (2): LONGITUDE_X, LATITUDE_Y #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  DATA_ENTRY_POINTS <- validate_table_content(   x = x,   table_name = \"entry_points\",   point_name = \"NAME\",   lng = \"LONGITUDE_X\",   lat = \"LATITUDE_Y\",   mode = \"MODE\",   type = \"TYPE\" )  DATA_ENTRY_POINTS #> $table_name #> [1] \"entry_points\" #>  #> $required_columns #> $chk #> [1] TRUE #>  #> $msg #> [1] \"All required columns selected.\" #>  #> $details #> character(0) #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $optional_columns #> $chk #> [1] TRUE #>  #> $msg #> [1] \"Optional columns selected are available.\" #>  #> $details #> character(0) #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $validate_rules #> $chk #> [1] TRUE #>  #> $msg #> 10 valid rules checking dataset. #>  #> $details #> # A tibble: 10 × 8 #>    colname    valid required column_found n     index value msg                  #>    <chr>      <lgl> <lgl>    <lgl>        <lgl> <lgl> <lgl> <glue>               #>  1 point_name TRUE  TRUE     TRUE         NA    NA    NA    \"point_name\" has be… #>  2 point_name TRUE  TRUE     TRUE         NA    NA    NA    \"point_name\" has be… #>  3 lng        TRUE  TRUE     TRUE         NA    NA    NA    \"lng\" has been vali… #>  4 lng        TRUE  TRUE     TRUE         NA    NA    NA    \"lng\" has been vali… #>  5 lng        TRUE  TRUE     TRUE         NA    NA    NA    \"lng\" has been vali… #>  6 lat        TRUE  TRUE     TRUE         NA    NA    NA    \"lat\" has been vali… #>  7 lat        TRUE  TRUE     TRUE         NA    NA    NA    \"lat\" has been vali… #>  8 lat        TRUE  TRUE     TRUE         NA    NA    NA    \"lat\" has been vali… #>  9 mode       TRUE  FALSE    TRUE         NA    NA    NA    \"mode\" has been val… #> 10 type       TRUE  FALSE    TRUE         NA    NA    NA    \"type\" has been val… #>  #> attr(,\"class\") #> [1] \"validation_status\" #>  #> $dataset #> Simple feature collection with 110 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 7.572541 ymin: 31.94455 xmax: 11.59319 ymax: 37.26487 #> Geodetic CRS:  WGS 84 #> # A tibble: 110 × 5 #>    point_id point_name             mode  type             geometry #>  * <chr>    <chr>                  <chr> <chr>         <POINT [°]> #>  1 ep-00001 aeroport Djerba        C     AIR   (10.77592 33.87149) #>  2 ep-00002 aeroport enfidha       C     AIR   (10.43123 36.07011) #>  3 ep-00003 aeroport monastir      C     AIR   (10.75472 35.75806) #>  4 ep-00004 aeroport sfax          C     AIR   (10.68861 34.72056) #>  5 ep-00005 aeroport tabarka       C     AIR    (8.87528 36.98028) #>  6 ep-00006 Aeroport tozeur        C     AIR    (8.10139 33.93889) #>  7 ep-00007 aeroport tunis cathage C     AIR   (10.22694 36.85111) #>  8 ep-00001 aeroport Djerba        C     AIR   (10.77592 33.87149) #>  9 ep-00002 aeroport enfidha       C     AIR   (10.43123 36.07011) #> 10 ep-00003 aeroport monastir      C     AIR   (10.75472 35.75806) #> # ℹ 100 more rows #>  #> $dataset_changes #> [1] \"\\\"Entry points\\\" `lat` and `lng` table converted to type POINT_sf\" #>  #> attr(,\"class\") #> [1] \"table_validation_status\""},{"path":"/reference/validate_table_content_cli_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Format validate_table_content into CLI message — validate_table_content_cli_msg","title":"Format validate_table_content into CLI message — validate_table_content_cli_msg","text":"Format validate_table_content CLI message","code":""},{"path":"/reference/validate_table_content_cli_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format validate_table_content into CLI message — validate_table_content_cli_msg","text":"","code":"validate_table_content_cli_msg(x)"},{"path":"/reference/validate_table_content_cli_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format validate_table_content into CLI message — validate_table_content_cli_msg","text":"x output validate_table_content()","code":""},{"path":"/reference/validate_table_content_cli_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format validate_table_content into CLI message — validate_table_content_cli_msg","text":"dataset x, throws errors validation issues validate_table_content()","code":""},{"path":"/reference/validate_table_content_cli_msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format validate_table_content into CLI message — validate_table_content_cli_msg","text":"","code":"x <- wahis_emission_risk_factors status <- validate_table_content(x, table_name = \"emission_risk_factors\") dataset <- validate_table_content_cli_msg(status) # error here if invalid data #> ✔ All data in \"emission_risk_factors\" valided.  # example of non-valid data if(FALSE){ wrong_data <- mtcars wrong_data$slaughter <- as.integer(round(runif(nrow(mtcars)))) wrong_data$last_outbreak_end_date <- \"HELLO\" status <- validate_table_content(wrong_data, table_name = \"emission_risk_factors\") dataset <- validate_table_content_cli_msg(status) # error here if invalid data }"},{"path":"/reference/wahis_emission_risk_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Emission Risk Factors dataset from WAHIS — wahis_emission_risk_factors","title":"Emission Risk Factors dataset from WAHIS — wahis_emission_risk_factors","text":"data set combination two datasets downloaded WAHIS (World Animal Health Information System).","code":""},{"path":"/reference/wahis_emission_risk_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emission Risk Factors dataset from WAHIS — wahis_emission_risk_factors","text":"","code":"wahis_emission_risk_factors"},{"path":"/reference/wahis_emission_risk_factors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Emission Risk Factors dataset from WAHIS — wahis_emission_risk_factors","text":"object class tbl_df (inherits tbl, data.frame) 16940 rows 18 columns.","code":""},{"path":"/reference/wahis_emission_risk_factors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Emission Risk Factors dataset from WAHIS — wahis_emission_risk_factors","text":"dataset categories measures taken governments control survey animal disease situation one country specific animal disease. dataset serves starting point risk introduction analysis. analysis begin filtering data one type animal species disease, calculating risk introduction disease movements species. Note countries, diseases animals - cross section three - data.","code":""},{"path":"/reference/wahis_emission_risk_factors.html","id":"data-source","dir":"Reference","previous_headings":"","what":"Data source","title":"Emission Risk Factors dataset from WAHIS — wahis_emission_risk_factors","text":"Control measures dataset exported corresponding WAHIS dashboard. Exported recent time period countries, diseases species. Disease situation dataset exported corresponding WAHIS dashboard. Exported data countries, filtered data recent outbreak across country, disease species. two datasets transformed combined create WAHIS emission risk factors dataset essential analysis methods package.","code":""},{"path":"/reference/wahis_emission_risk_factors.html","id":"data-specifications","dir":"Reference","previous_headings":"","what":"Data specifications","title":"Emission Risk Factors dataset from WAHIS — wahis_emission_risk_factors","text":"dataset contains 17 columns, specific types data rules: Country information: iso3: character - three-letter ISO 3166-1 alpha-3 country code. country: character - full name country. Disease information (whole dataset): disease: character - name disease. animal_category: character - category animal (\"Domestic\" \"Wild\"). species: character - species name affected disease. Measures control surveillence, either 1 0 (0 = measure inplace, 1 = measure inplace, .e. 1 = risk, 0 = risk). disease_notification: integer - Indicator notification targeted_surveillance: integer - Risk factor score targeted surveillance efforts. general_surveillance: integer - Risk factor score general surveillance activities. screening: integer - Risk factor score screening measures. precautions_at_the_borders: integer - Risk factor score precautions taken borders. slaughter: integer - Risk factor score related slaughter process. selective_killing_and_disposal: integer - Risk factor score selective killing disposal procedures. zoning: integer - Risk factor score zoning strategies. official_vaccination: integer - Risk factor score official vaccination programs. Epidemiological status: last_outbreak_end_date: Date (YYYY-MM-DD) - end date last outbreak. Animal commerce, indicators wherther legal illegal commerce conducted epidemiological units country. commerce_illegal: integer -  either 1 0 commerce_legal: integer -  either 1 0 information: data_source: character - Reference source data.","code":""},{"path":"/reference/world_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"World Simple Features — world_sf","title":"World Simple Features — world_sf","text":"SF dataset containing global administrative boundaries countries.","code":""},{"path":"/reference/world_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"World Simple Features — world_sf","text":"","code":"world_sf"},{"path":"/reference/world_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"World Simple Features — world_sf","text":"object class sf (inherits data.frame) 227 rows 4 columns.","code":""},{"path":"/reference/world_sf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"World Simple Features — world_sf","text":"geodata::gadm()","code":""},{"path":[]}]
