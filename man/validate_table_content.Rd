% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate.R
\name{validate_table_content}
\alias{validate_table_content}
\title{Validate 'riskintro' Datasets}
\usage{
validate_table_content(x, name, ...)
}
\arguments{
\item{x}{A data frame or an 'sf' object to be validated.}

\item{name}{A character string specifying the name of the dataset. It
accepts one of the following values:
\itemize{
\item "animal_mobility"
\item "epi_units"
\item "entry_points"
\item "emission_risk_factors"
}}

\item{...}{Additional arguments to be passed to the function. It is expected
to be a named list of columns to be renamed in the dataset.
For example, \verb{col1 = "new_col1", col2 = "new_col2"}.}
}
\value{
A list containing the validation status of the dataset. The list
contains the following elements:
\itemize{
\item \code{required_columns}: A list with the status of required columns.
\item \code{optional_columns}: A list with the status of optional columns.
\item \code{validate_rules}: A list with the status of validation rules.
\item \code{dataset}: The dataset after renaming and selecting the specified columns.
If validation fails, this element will be NULL, not available.
}
}
\description{
Validates the datasets with 'riskintro' rules.
The function checks the required and optional columns,
and validates the data using the rules defined in the specifications.
}
\details{
The function checks if the dataset contains the required and optional columns
as specified in the specifications. It also validates the data using the
rules defined in the specifications. If errors are met or validity rules
are not satisfied, the function returns a list with the status of the validation.
}
\examples{
#
# read geographic data from Tunisia
tun_epi_files <-
  list.files(
    system.file(
      package = "riskintrodata",
      "samples",
      "tunisia",
      "epi_units"
    ),
    full.names = TRUE
  )

tun_epi_unit <- read_geo_file(tun_epi_files)

DATA_EPI_UNITS <- validate_table_content(
  x = tun_epi_unit,
  name = "epi_units",
  eu_name = "shapeName",
  user_id = "fid"
)

DATA_EPI_UNITS
# read animal mobility data from Tunisia
tun_animal_mobility <-
  list.files(
    system.file(
      package = "riskintrodata",
      "samples",
      "tunisia",
      "animal_mobility"
    ),
    full.names = TRUE
  )

x <- readr::read_delim(
  tun_animal_mobility,
  delim = ";"
)

DATA_ANIMAL_MOBILITY <- validate_table_content(
  x,
  name = "animal_mobility",
  o_name = "ORIGIN_NAME",
  o_lng = "ORIGIN_LONGITUDE_X",
  o_lat = "ORIGIN_LATITUDE_Y",
  d_name = "DESTINATION_NAME",
  d_lng = "DESTINATION_LONGITUDE_X",
  d_lat = "DESTINATION_LATITUDE_Y",
  quantity = "HEADCOUNT"
)

DATA_ANIMAL_MOBILITY
# read Tunisia emission risk factors dataset
tun_erf_file <-
  system.file(
    package = "riskintrodata",
    "samples",
    "tunisia",
    "emission_risk_factor",
    "emission_risk_factors.csv"
  )
x <- read_emission_risk_factor_file(tun_erf_file)

DATA_ERF <- validate_table_content(x, name = "emission_risk_factors")

DATA_ERF
}
